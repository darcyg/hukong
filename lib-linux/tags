!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	src/SimpleNet/snet_config.h	39;"	d
AddOpt	src/getopt_wrap.cpp	/^    void GetOpt::AddOpt(char short_opt, const char *long_opt, bool has_arg)$/;"	f	class:lib_linux::GetOpt
Address	src/SimpleNet/snet_address.h	/^            Address( const std::string &ip, unsigned short port )$/;"	f	class:lib_linux::Address
Address	src/SimpleNet/snet_address.h	/^            Address( const struct sockaddr_in &addr )$/;"	f	class:lib_linux::Address
Address	src/SimpleNet/snet_address.h	/^            Address()$/;"	f	class:lib_linux::Address
Address	src/SimpleNet/snet_address.h	/^    class Address$/;"	c	namespace:lib_linux
AutoLock	src/Mutex.h	/^            AutoLock(Mutex &mutex)$/;"	f	class:lib_linux::AutoLock
AutoLock	src/Mutex.h	/^    class AutoLock$/;"	c	namespace:lib_linux
Base64decode	src/base64.c	/^int Base64decode(char *bufplain, const char *bufcoded)$/;"	f
Base64decode_len	src/base64.c	/^int Base64decode_len(const char *bufcoded)$/;"	f
Base64encode	src/base64.c	/^int Base64encode(char *encoded, const char *string, int len)$/;"	f
Base64encode_len	src/base64.c	/^int Base64encode_len(int len)$/;"	f
Broadcast	src/SimpleNet/snet_sessionManager.cpp	/^    void SessionManager::Broadcast(const char *buf, int len, const ISession *pExclude)$/;"	f	class:lib_linux::SessionManager
Buffer	src/buffer.h	/^            Buffer( const Buffer &buf )$/;"	f	class:lib_linux::Buffer
Buffer	src/buffer.h	/^            Buffer( int init_size )$/;"	f	class:lib_linux::Buffer
Buffer	src/buffer.h	/^            Buffer() $/;"	f	class:lib_linux::Buffer
Buffer	src/buffer.h	/^    class Buffer$/;"	c	namespace:lib_linux
CFILES	Makefile	/^CFILES:=$(shell find $(SRC_DIR)  -maxdepth 1 -name "*.c")$/;"	m
CIRCLEQ_EMPTY	src/queue.h	436;"	d
CIRCLEQ_END	src/queue.h	433;"	d
CIRCLEQ_ENTRY	src/queue.h	422;"	d
CIRCLEQ_FIRST	src/queue.h	431;"	d
CIRCLEQ_FOREACH	src/queue.h	439;"	d
CIRCLEQ_FOREACH_REVERSE	src/queue.h	444;"	d
CIRCLEQ_HEAD	src/queue.h	413;"	d
CIRCLEQ_HEAD_INITIALIZER	src/queue.h	419;"	d
CIRCLEQ_INIT	src/queue.h	452;"	d
CIRCLEQ_INSERT_AFTER	src/queue.h	457;"	d
CIRCLEQ_INSERT_BEFORE	src/queue.h	467;"	d
CIRCLEQ_INSERT_HEAD	src/queue.h	477;"	d
CIRCLEQ_INSERT_TAIL	src/queue.h	487;"	d
CIRCLEQ_LAST	src/queue.h	432;"	d
CIRCLEQ_NEXT	src/queue.h	434;"	d
CIRCLEQ_PREV	src/queue.h	435;"	d
CIRCLEQ_REMOVE	src/queue.h	497;"	d
CIRCLEQ_REPLACE	src/queue.h	512;"	d
COBJS	Makefile	/^COBJS:=$(CFILES:%.c=%.o) $/;"	m
CPPFILES	Makefile	/^CPPFILES:=$(shell find $(SRC_DIR)  -maxdepth 1 -name "*.cpp")$/;"	m
CPPOBJS	Makefile	/^CPPOBJS:=$(CPPFILES:%.cpp=%.o)$/;"	m
Clear	src/config_parser.h	/^            void Clear()$/;"	f	class:lib_linux::IniConfigParser
ColorDecoratorHandler	src/stdlog.cpp	/^    ColorDecoratorHandler::ColorDecoratorHandler(StdLogHandler *pHandler)$/;"	f	class:lib_linux::ColorDecoratorHandler
ColorDecoratorHandler	src/stdlog.h	/^    class ColorDecoratorHandler:public StdLogHandler$/;"	c	namespace:lib_linux
Condition	src/condition.h	/^            Condition()$/;"	f	class:lib_linux::Condition
Condition	src/condition.h	/^    class Condition$/;"	c	namespace:lib_linux
Connect	src/SimpleNet/snet_sessionManager.cpp	/^    ISession *SessionManager::Connect(SessionFactory &factory, const Address &remote_addr, bool bBlocking)$/;"	f	class:lib_linux::SessionManager
CreateProcess	src/process_wrap.cpp	/^    bool Process::CreateProcess(const char *file, const char *arg)$/;"	f	class:lib_linux::Process
CreateSession	src/SimpleNet/snet_sessionFactory.h	/^            ISession* CreateSession()$/;"	f	class:lib_linux::SessionFactoryImp
DEBUG	src/lib_linux_config.h	26;"	d
DEBUG_HEX	src/lib_linux_config.h	27;"	d
DWORD	src/SimpleNet/snet_config.h	28;"	d
Daemonize	src/utility.h	/^            static bool Daemonize()$/;"	f	class:lib_linux::Utility
Debug	src/stdlog.cpp	/^    void StdLog::Debug(const char * format, ...)$/;"	f	class:lib_linux::StdLog
DebugDelete	src/memory_check.cpp	/^    void MemoryCheck::DebugDelete(void *mem)$/;"	f	class:lib_linux::MemoryCheck
DebugNew	src/memory_check.cpp	/^    void *MemoryCheck::DebugNew(size_t size, const char *file, int nLine)$/;"	f	class:lib_linux::MemoryCheck
Debug_HEX	src/stdlog.cpp	/^    void StdLog::Debug_HEX(const char *pData, int nLen)$/;"	f	class:lib_linux::StdLog
Delete	src/SimpleNet/snet_sessionManager.cpp	/^    void SessionManager::Delete(ISession *pSession)$/;"	f	class:lib_linux::SessionManager
ERROR	src/lib_linux_config.h	30;"	d
Error	src/stdlog.cpp	/^    void StdLog::Error(const char * format, ...)$/;"	f	class:lib_linux::StdLog
FLAG_COLOR	src/lib_linux_config.h	/^        FLAG_COLOR = 0x02,$/;"	e	enum:lib_linux::__anon1
FLAG_CON	src/lib_linux_config.h	/^        FLAG_CON = 0x10,$/;"	e	enum:lib_linux::__anon1
FLAG_NET	src/lib_linux_config.h	/^        FLAG_NET = 0x08,$/;"	e	enum:lib_linux::__anon1
FLAG_SYSLOG	src/lib_linux_config.h	/^        FLAG_SYSLOG = 0x04,$/;"	e	enum:lib_linux::__anon1
Fdset	src/SimpleNet/snet_fdset.h	/^            Fdset( unsigned int max_fd = FD_SETSIZE )$/;"	f	class:lib_linux::Fdset
Fdset	src/SimpleNet/snet_fdset.h	/^            Fdset(const Fdset& _instance)$/;"	f	class:lib_linux::Fdset
Fdset	src/SimpleNet/snet_fdset.h	/^    class Fdset$/;"	c	namespace:lib_linux
Flush	src/serialport.h	/^        void Flush()$/;"	f	class:Serialport
Get	src/config_parser.h	/^            std::string Get(std::string strKey)$/;"	f	class:lib_linux::TxtConfigParser
Get	src/config_parser.h	/^            std::string Get(std::string strSection, std::string strKey)$/;"	f	class:lib_linux::IniConfigParser
GetArgument	src/getopt_wrap.cpp	/^    const std::vector<std::string> &GetOpt::GetArgument()$/;"	f	class:lib_linux::GetOpt
GetBaudrate	src/serialport.h	/^        inline int GetBaudrate()$/;"	f	class:Serialport
GetBuffer	src/SimpleNet/snet_session.cpp	/^    Buffer& ISession::GetBuffer()$/;"	f	class:lib_linux::ISession
GetCurLogger	src/lib_linux_config.cpp	/^    StdLog &GetCurLogger()$/;"	f	namespace:lib_linux
GetFD	src/serialport.h	/^        inline int GetFD()$/;"	f	class:Serialport
GetHandler	src/stdlog.cpp	/^    StdLogHandler *StdLog::GetHandler()$/;"	f	class:lib_linux::StdLog
GetMutex	src/Mutex.h	/^            pthread_mutex_t *GetMutex()$/;"	f	class:lib_linux::Mutex
GetOpt	src/getopt_wrap.cpp	/^    GetOpt::GetOpt(int argc, char **argv)$/;"	f	class:lib_linux::GetOpt
GetOpt	src/getopt_wrap.h	/^    class GetOpt$/;"	c	namespace:lib_linux
GetPID	src/process_wrap.cpp	/^    pid_t Process::GetPID()$/;"	f	class:lib_linux::Process
GetPPID	src/process_wrap.cpp	/^    pid_t Process::GetPPID()$/;"	f	class:lib_linux::Process
GetSessionCount	src/SimpleNet/snet_sessionManager.cpp	/^    int SessionManager::GetSessionCount()$/;"	f	class:lib_linux::SessionManager
GetSessionList	src/SimpleNet/snet_sessionManager.cpp	/^    SessionManager::SessionList SessionManager::GetSessionList()$/;"	f	class:lib_linux::SessionManager
GetThreadID	src/thread_wrap.cpp	/^    pthread_t Thread::GetThreadID()$/;"	f	class:lib_linux::Thread
GetUptime	src/utility.h	/^            static unsigned long GetUptime()$/;"	f	class:lib_linux::Utility
GetWaitingNBSessionCount	src/SimpleNet/snet_sessionManager.cpp	/^    int SessionManager::GetWaitingNBSessionCount(void)$/;"	f	class:lib_linux::SessionManager
Handler	test/process_test.cpp	/^void Handler(int signum)$/;"	f
INFO	src/lib_linux_config.h	28;"	d
INVALID_SOCKET	src/SimpleNet/snet_config.h	31;"	d
ISession	src/SimpleNet/snet_session.cpp	/^    ISession::ISession()$/;"	f	class:lib_linux::ISession
ISession	src/SimpleNet/snet_session.h	/^    class ISession:public Socket$/;"	c	namespace:lib_linux
Info	src/stdlog.cpp	/^    void StdLog::Info(const char * format, ...)$/;"	f	class:lib_linux::StdLog
IniConfigParser	src/config_parser.h	/^            IniConfigParser()$/;"	f	class:lib_linux::IniConfigParser
IniConfigParser	src/config_parser.h	/^    class IniConfigParser$/;"	c	namespace:lib_linux
Initial	src/SimpleNet/snet_tool.cpp	/^		void Initial(void)$/;"	f	namespace:lib_linux::system
Initialize	src/thread_wrap.cpp	/^    void Thread::Initialize()$/;"	f	class:lib_linux::Thread
Input	src/config_parser.h	/^            void Input(std::istream &in)$/;"	f	class:lib_linux::IniConfigParser
Input	src/config_parser.h	/^            void Input(std::istream &in)$/;"	f	class:lib_linux::TxtConfigParser
Instance	src/singleton.h	/^        static T *Instance()$/;"	f	class:Singleton
IsOpen	src/serialport.h	/^        inline bool IsOpen()$/;"	f	class:Serialport
IsRunning	src/SimpleNet/snet_sessionManager.cpp	/^    bool SessionManager::IsRunning()$/;"	f	class:lib_linux::SessionManager
JobQueue	src/jobqueue.h	/^                JobQueue()$/;"	f	class:lib_linux::JobQueue
JobQueue	src/jobqueue.h	/^        class JobQueue$/;"	c	namespace:lib_linux
Kill	src/process_wrap.cpp	/^    void Process::Kill()$/;"	f	class:lib_linux::Process
LIST_EMPTY	src/queue.h	186;"	d
LIST_END	src/queue.h	185;"	d
LIST_ENTRY	src/queue.h	175;"	d
LIST_FIRST	src/queue.h	184;"	d
LIST_FOREACH	src/queue.h	189;"	d
LIST_HEAD	src/queue.h	167;"	d
LIST_HEAD_INITIALIZER	src/queue.h	172;"	d
LIST_INIT	src/queue.h	197;"	d
LIST_INSERT_AFTER	src/queue.h	201;"	d
LIST_INSERT_BEFORE	src/queue.h	209;"	d
LIST_INSERT_HEAD	src/queue.h	216;"	d
LIST_NEXT	src/queue.h	187;"	d
LIST_REMOVE	src/queue.h	223;"	d
LIST_REPLACE	src/queue.h	232;"	d
LOG_LEVEL_DEBUG	src/stdlog.h	/^        LOG_LEVEL_DEBUG$/;"	e	enum:lib_linux::__anon2
LOG_LEVEL_ERROR	src/stdlog.h	/^        LOG_LEVEL_ERROR = 0,$/;"	e	enum:lib_linux::__anon2
LOG_LEVEL_INFO	src/stdlog.h	/^        LOG_LEVEL_INFO,$/;"	e	enum:lib_linux::__anon2
LOG_LEVEL_NONE	src/stdlog.h	/^        LOG_LEVEL_NONE = -1,$/;"	e	enum:lib_linux::__anon2
LOG_LEVEL_WARNING	src/stdlog.h	/^        LOG_LEVEL_WARNING,$/;"	e	enum:lib_linux::__anon2
Lock	src/Mutex.h	/^            void Lock()$/;"	f	class:lib_linux::Mutex
MAX_FILENAMESIZE	src/memory_check.h	/^        MAX_FILENAMESIZE = 48$/;"	e	enum:lib_linux::__anon5
MemoryCheck	src/memory_check.h	/^    class MemoryCheck$/;"	c	namespace:lib_linux
Mutex	src/Mutex.h	/^            Mutex()$/;"	f	class:lib_linux::Mutex
Mutex	src/Mutex.h	/^    class Mutex$/;"	c	namespace:lib_linux
MySerialportTest	test/serialport_test.cpp	/^class MySerialportTest: public Serialport$/;"	c	file:
MySession	test/SimpleNetTest.cpp	/^class MySession:public ISession$/;"	c	file:
MyThread	test/thread_wrap_test.cpp	/^        MyThread(int num, Mutex &mutex)$/;"	f	class:MyThread
MyThread	test/thread_wrap_test.cpp	/^class MyThread: public Thread$/;"	c	file:
NetworkInitializer	src/SimpleNet/snet_tool.cpp	/^                NetworkInitializer()$/;"	f	class:lib_linux::__anon3::NetworkInitializer
NetworkInitializer	src/SimpleNet/snet_tool.cpp	/^        class NetworkInitializer$/;"	c	namespace:lib_linux::__anon3	file:
NewSession	src/SimpleNet/snet_sessionManager.cpp	/^    bool SessionManager::NewSession()$/;"	f	class:lib_linux::SessionManager
OnConnect	test/SimpleNetTest.cpp	/^        void OnConnect(SessionManager *pSessionManager)$/;"	f	class:MySession
OnDisconnect	test/SimpleNetTest.cpp	/^        void OnDisconnect(SessionManager *pSessionManager)$/;"	f	class:MySession
OnError	src/SimpleNet/snet_session.h	/^            virtual void OnError(SessionManager *pSessionManager, int nErrorCode, const char *pStr)$/;"	f	class:lib_linux::ISession
OnError	src/SimpleNet/snet_socket.h	/^        virtual void OnError(int nErrorCode, const char *pStr)$/;"	f	class:lib_linux::Socket
OnError	test/SimpleNetTest.cpp	/^        void OnError(SessionManager *pSessionManager, int nErrorCode, const char *pStr)$/;"	f	class:MySession
OnRead	test/SimpleNetTest.cpp	/^        void OnRead(SessionManager *pSessionManager)$/;"	f	class:MySession
OnReceive	src/serialport.h	/^        virtual void OnReceive(int nLen)$/;"	f	class:Serialport
OnReceive	test/serialport_test.cpp	/^        void OnReceive(int nLen)$/;"	f	class:MySerialportTest
Open	src/serialport.h	/^        bool Open(const char *pstrPort, int nBaudRate, const char *pstrSetting="8N1")$/;"	f	class:Serialport
Opt	src/getopt_wrap.h	/^            struct Opt$/;"	s	class:lib_linux::GetOpt
Output	src/config_parser.h	/^            void Output(std::ostream &out)$/;"	f	class:lib_linux::IniConfigParser
Output	src/config_parser.h	/^            void Output(std::ostream &out)$/;"	f	class:lib_linux::TxtConfigParser
Parse	src/getopt_wrap.cpp	/^    bool GetOpt::Parse()$/;"	f	class:lib_linux::GetOpt
ParseSerialSetting	src/serialport.h	/^        bool ParseSerialSetting(struct termios &options, const char *pstrSetting)$/;"	f	class:Serialport
Poll	src/SimpleNet/snet_sessionManager.cpp	/^    int SessionManager::Poll(struct timeval &timeout)$/;"	f	class:lib_linux::SessionManager
PopThread	test/jobqueue_test.cpp	/^        PopThread()$/;"	f	class:PopThread
PopThread	test/jobqueue_test.cpp	/^class PopThread: public Thread$/;"	c	file:
Post	src/semaphore_wrap.h	/^            void Post()$/;"	f	class:lib_linux::Semaphore
Print	test/threadpool_test.cpp	/^void Print(void *pvoid)$/;"	f
Process	src/process_wrap.cpp	/^    Process::Process(const char *program, const char *arg)$/;"	f	class:lib_linux::Process
Process	src/process_wrap.h	/^    class Process$/;"	c	namespace:lib_linux
Push	src/jobqueue.h	/^                void Push(T &elem)$/;"	f	class:lib_linux::JobQueue
PushThread	test/jobqueue_test.cpp	/^        PushThread()$/;"	f	class:PushThread
PushThread	test/jobqueue_test.cpp	/^class PushThread: public Thread$/;"	c	file:
Read	src/serialport.h	/^        int Read(void *Buffer, int nBufferLength)$/;"	f	class:Serialport
Run	src/serialport.h	/^        void Run()$/;"	f	class:Serialport
Run	src/threadpool.cpp	/^    void ThreadPool::Run(Task f)$/;"	f	class:lib_linux::ThreadPool
Run	src/threadpool.cpp	/^    void ThreadPool::ThreadTask::Run()$/;"	f	class:lib_linux::ThreadPool::ThreadTask
Run	test/jobqueue_test.cpp	/^        void Run()$/;"	f	class:PopThread
Run	test/jobqueue_test.cpp	/^        void Run()$/;"	f	class:PushThread
Run	test/thread_wrap_test.cpp	/^        void Run()$/;"	f	class:MyThread
SA_HANDLER	src/process_wrap.h	/^            typedef void (*SA_HANDLER)(int);$/;"	t	class:lib_linux::Process
SET_LOG	src/lib_linux_config.h	25;"	d
SIMPLEQ_EMPTY	src/queue.h	264;"	d
SIMPLEQ_END	src/queue.h	263;"	d
SIMPLEQ_ENTRY	src/queue.h	254;"	d
SIMPLEQ_FIRST	src/queue.h	262;"	d
SIMPLEQ_FOREACH	src/queue.h	267;"	d
SIMPLEQ_HEAD	src/queue.h	245;"	d
SIMPLEQ_HEAD_INITIALIZER	src/queue.h	251;"	d
SIMPLEQ_INIT	src/queue.h	275;"	d
SIMPLEQ_INSERT_AFTER	src/queue.h	292;"	d
SIMPLEQ_INSERT_HEAD	src/queue.h	280;"	d
SIMPLEQ_INSERT_TAIL	src/queue.h	286;"	d
SIMPLEQ_NEXT	src/queue.h	265;"	d
SIMPLEQ_REMOVE_HEAD	src/queue.h	298;"	d
SIMPLE_NET_DEBUG	src/SimpleNet/snet_config.h	44;"	d
SIMPLE_NET_DEBUG	src/SimpleNet/snet_config.h	46;"	d
SIMPLE_NET_DEBUG	src/SimpleNet/snet_config.h	51;"	d
SIMPLE_NET_DEBUG	src/SimpleNet/snet_config.h	53;"	d
SIZE	src/buffer.h	/^                SIZE = 256$/;"	e	enum:lib_linux::Buffer::__anon4
SLIST_EMPTY	src/queue.h	112;"	d
SLIST_END	src/queue.h	111;"	d
SLIST_ENTRY	src/queue.h	102;"	d
SLIST_FIRST	src/queue.h	110;"	d
SLIST_FOREACH	src/queue.h	115;"	d
SLIST_FOREACH_PREVPTR	src/queue.h	120;"	d
SLIST_HEAD	src/queue.h	94;"	d
SLIST_HEAD_INITIALIZER	src/queue.h	99;"	d
SLIST_INIT	src/queue.h	128;"	d
SLIST_INSERT_AFTER	src/queue.h	132;"	d
SLIST_INSERT_HEAD	src/queue.h	137;"	d
SLIST_NEXT	src/queue.h	113;"	d
SLIST_REMOVE	src/queue.h	150;"	d
SLIST_REMOVE_HEAD	src/queue.h	146;"	d
SLIST_REMOVE_NEXT	src/queue.h	142;"	d
SOCKET	src/SimpleNet/snet_config.h	29;"	d
SOCKET_ERROR	src/SimpleNet/snet_config.h	32;"	d
SOCKET_LEN_TYPE	src/SimpleNet/snet_config.h	11;"	d
SOCKET_LEN_TYPE	src/SimpleNet/snet_config.h	30;"	d
SRC_DIR	Makefile	/^SRC_DIR=src src\/SimpleNet$/;"	m
Semaphore	src/semaphore_wrap.h	/^            Semaphore(unsigned int unStartVal=0)$/;"	f	class:lib_linux::Semaphore
Semaphore	src/semaphore_wrap.h	/^    class Semaphore$/;"	c	namespace:lib_linux
Serialport	src/serialport.h	/^        Serialport(bool bThreadRead=true)$/;"	f	class:Serialport
Serialport	src/serialport.h	/^class Serialport:public lib_linux::Thread$/;"	c
SessionFactory	src/SimpleNet/snet_sessionFactory.h	/^            SessionFactory()$/;"	f	class:lib_linux::SessionFactory
SessionFactory	src/SimpleNet/snet_sessionFactory.h	/^    class SessionFactory$/;"	c	namespace:lib_linux
SessionFactoryImp	src/SimpleNet/snet_sessionFactory.h	/^    class SessionFactoryImp: public SessionFactory$/;"	c	namespace:lib_linux
SessionList	src/SimpleNet/snet_sessionManager.h	/^            typedef std::list<ISession *> SessionList;$/;"	t	class:lib_linux::SessionManager
SessionManager	src/SimpleNet/snet_sessionManager.cpp	/^    SessionManager::SessionManager(int nMaxSession)$/;"	f	class:lib_linux::SessionManager
SessionManager	src/SimpleNet/snet_sessionManager.h	/^    class SessionManager$/;"	c	namespace:lib_linux
SessionMap	src/SimpleNet/snet_sessionManager.h	/^            typedef std::map<int, ISession*> SessionMap;$/;"	t	class:lib_linux::SessionManager
SessionMapToList	src/SimpleNet/snet_sessionManager.cpp	/^    SessionManager::SessionList SessionManager::SessionMapToList(SessionMap &map)$/;"	f	class:lib_linux::SessionManager
Set	src/config_parser.h	/^            void Set(std::string strKey, std::string strValue)$/;"	f	class:lib_linux::TxtConfigParser
Set	src/config_parser.h	/^            void Set(std::string strSection, std::string strKey, std::string strValue)$/;"	f	class:lib_linux::IniConfigParser
SetBlocking	src/SimpleNet/snet_socket.h	/^        bool SetBlocking(bool bSet)$/;"	f	class:lib_linux::Socket
SetHandler	src/stdlog.cpp	/^    void ColorDecoratorHandler::SetHandler(StdLogHandler *pHandler)$/;"	f	class:lib_linux::ColorDecoratorHandler
SetHandler	src/stdlog.cpp	/^    void StdLog::SetHandler(StdLogHandler *pHandler)$/;"	f	class:lib_linux::StdLog
SetKeepAlive	src/SimpleNet/snet_socket.h	/^        bool SetKeepAlive(unsigned long ulIntervalTime = 60*60*1000)$/;"	f	class:lib_linux::Socket
SetLevel	src/stdlog.cpp	/^    void StdLog::SetLevel(int level)$/;"	f	class:lib_linux::StdLog
SetLogger	src/lib_linux_config.cpp	/^    void SetLogger(int flag, int level)$/;"	f	namespace:lib_linux
SetRecvTimeout	src/SimpleNet/snet_socket.h	/^        bool SetRecvTimeout(int seconds)$/;"	f	class:lib_linux::Socket
SetSendTimeout	src/SimpleNet/snet_socket.h	/^        bool SetSendTimeout(int seconds)$/;"	f	class:lib_linux::Socket
SetupFdset	src/SimpleNet/snet_sessionManager.cpp	/^    void SessionManager::SetupFdset()$/;"	f	class:lib_linux::SessionManager
Shutdown	src/SimpleNet/snet_sessionManager.cpp	/^    void SessionManager::Shutdown()$/;"	f	class:lib_linux::SessionManager
SigactionIgnore	src/process_wrap.cpp	/^    bool Process::SigactionIgnore(int signum)$/;"	f	class:lib_linux::Process
SigactionSet	src/process_wrap.cpp	/^    bool Process::SigactionSet(int signum, SA_HANDLER handler)$/;"	f	class:lib_linux::Process
Signal	src/condition.h	/^            void Signal()$/;"	f	class:lib_linux::Condition
SignalAll	src/condition.h	/^            void SignalAll()$/;"	f	class:lib_linux::Condition
Singleton	src/singleton.h	/^        Singleton()$/;"	f	class:Singleton
Singleton	src/singleton.h	/^class Singleton$/;"	c
Size	src/jobqueue.h	/^                int Size()$/;"	f	class:lib_linux::JobQueue
Sleep	src/utility.h	/^            static void Sleep(int ms)$/;"	f	class:lib_linux::Utility
Socket	src/SimpleNet/snet_socket.h	/^		Socket()$/;"	f	class:lib_linux::Socket
Socket	src/SimpleNet/snet_socket.h	/^	class Socket$/;"	c	namespace:lib_linux
Start	src/thread_wrap.cpp	/^    void Thread::Start()$/;"	f	class:lib_linux::Thread
Start	src/threadpool.cpp	/^    void ThreadPool::Start(int numThreads)$/;"	f	class:lib_linux::ThreadPool
StartupServer	src/SimpleNet/snet_sessionManager.cpp	/^    bool SessionManager::StartupServer(SessionFactory *pFactory, unsigned short usPort)$/;"	f	class:lib_linux::SessionManager
StdLog	src/stdlog.cpp	/^    StdLog::StdLog(StdLogHandler *pHandler)$/;"	f	class:lib_linux::StdLog
StdLog	src/stdlog.h	/^    class StdLog$/;"	c	namespace:lib_linux
StdLogHandler	src/stdlog.cpp	/^    StdLogHandler::StdLogHandler()$/;"	f	class:lib_linux::StdLogHandler
StdLogHandler	src/stdlog.h	/^    class StdLogHandler$/;"	c	namespace:lib_linux
StdLogNetHandler	src/stdnetlog.cpp	/^    StdLogNetHandler::StdLogNetHandler(const char *pstrIP, unsigned short port)$/;"	f	class:lib_linux::StdLogNetHandler
StdLogNetHandler	src/stdnetlog.h	/^    class StdLogNetHandler:public StdLogHandler$/;"	c	namespace:lib_linux
StdLogOutHandler	src/stdlog.h	/^    class StdLogOutHandler:public StdLogHandler$/;"	c	namespace:lib_linux
Stop	src/threadpool.cpp	/^    void ThreadPool::Stop()$/;"	f	class:lib_linux::ThreadPool
StrToInt	src/utility.h	/^            static bool StrToInt(const std::string &str, long &nRet)$/;"	f	class:lib_linux::Utility
StringParse	src/string_parse.cpp	/^    StringParse::StringParse(const std::string &str)$/;"	f	class:lib_linux::StringParse
StringParse	src/string_parse.h	/^    class StringParse$/;"	c	namespace:lib_linux
Strip	src/utility.h	/^            static std::string Strip(const std::string &str)$/;"	f	class:lib_linux::Utility
SyslogHandler	src/syslog_log.cpp	/^    SyslogHandler::SyslogHandler(const char *pstrIdent)$/;"	f	class:lib_linux::SyslogHandler
SyslogHandler	src/syslog_log.h	/^    class SyslogHandler:public StdLogHandler$/;"	c	namespace:lib_linux
TAILQ_EMPTY	src/queue.h	332;"	d
TAILQ_END	src/queue.h	325;"	d
TAILQ_ENTRY	src/queue.h	315;"	d
TAILQ_FIRST	src/queue.h	324;"	d
TAILQ_FOREACH	src/queue.h	335;"	d
TAILQ_FOREACH_REVERSE	src/queue.h	340;"	d
TAILQ_HEAD	src/queue.h	306;"	d
TAILQ_HEAD_INITIALIZER	src/queue.h	312;"	d
TAILQ_INIT	src/queue.h	348;"	d
TAILQ_INSERT_AFTER	src/queue.h	370;"	d
TAILQ_INSERT_BEFORE	src/queue.h	380;"	d
TAILQ_INSERT_HEAD	src/queue.h	353;"	d
TAILQ_INSERT_TAIL	src/queue.h	363;"	d
TAILQ_LAST	src/queue.h	327;"	d
TAILQ_NEXT	src/queue.h	326;"	d
TAILQ_PREV	src/queue.h	330;"	d
TAILQ_REMOVE	src/queue.h	387;"	d
TAILQ_REPLACE	src/queue.h	398;"	d
TARGET	Makefile	/^TARGET:=liblinux_tool.a$/;"	m
TESTAPP	Makefile	/^TESTAPP:=$(TESTOBJS:%.o=%)$/;"	m
TESTFILES	Makefile	/^TESTFILES:=$(shell find test -maxdepth 1 -name "*.cpp")$/;"	m
TESTOBJS	Makefile	/^TESTOBJS:=$(TESTFILES:%.cpp=%.o)$/;"	m
TagElem	src/memory_check.h	/^    struct TagElem$/;"	s	namespace:lib_linux
Take	src/threadpool.cpp	/^    bool ThreadPool::Take(Task &task)$/;"	f	class:lib_linux::ThreadPool
Task	src/threadpool.h	/^            typedef std::pointer_to_unary_function<void *, void> Task;$/;"	t	class:lib_linux::ThreadPool
Thread	src/thread_wrap.cpp	/^    Thread::Thread(bool bAutoStart)$/;"	f	class:lib_linux::Thread
Thread	src/thread_wrap.h	/^    class Thread$/;"	c	namespace:lib_linux
ThreadFuntion	src/thread_wrap.cpp	/^    void *Thread::ThreadFuntion(void *his)$/;"	f	class:lib_linux::Thread
ThreadPool	src/threadpool.cpp	/^    ThreadPool::ThreadPool()$/;"	f	class:lib_linux::ThreadPool
ThreadPool	src/threadpool.h	/^    class ThreadPool$/;"	c	namespace:lib_linux
ThreadTask	src/threadpool.cpp	/^    ThreadPool::ThreadTask::ThreadTask(ThreadPool &pool)$/;"	f	class:lib_linux::ThreadPool::ThreadTask
ThreadTask	src/threadpool.h	/^            class ThreadTask:public Thread$/;"	c	class:lib_linux::ThreadPool
TryWait	src/semaphore_wrap.h	/^            bool TryWait()$/;"	f	class:lib_linux::Semaphore
TxtConfigParser	src/config_parser.h	/^            TxtConfigParser()$/;"	f	class:lib_linux::TxtConfigParser
TxtConfigParser	src/config_parser.h	/^    class TxtConfigParser$/;"	c	namespace:lib_linux
UnLock	src/Mutex.h	/^            void UnLock()$/;"	f	class:lib_linux::Mutex
Utility	src/utility.h	/^    class Utility$/;"	c	namespace:lib_linux
ValidateMemory	src/memory_check.cpp	/^    void MemoryCheck::ValidateMemory(void *mem)$/;"	f	class:lib_linux::MemoryCheck
ValidateMemoryAll	src/memory_check.cpp	/^    int MemoryCheck::ValidateMemoryAll()$/;"	f	class:lib_linux::MemoryCheck
WARNING	src/lib_linux_config.h	29;"	d
WSAGetLastError	src/SimpleNet/snet_config.h	33;"	d
Wait	src/condition.h	/^            bool Wait(Mutex &mutex)$/;"	f	class:lib_linux::Condition
Wait	src/condition.h	/^            bool Wait(Mutex &mutex, unsigned int unMilSec)$/;"	f	class:lib_linux::Condition
Wait	src/process_wrap.cpp	/^    bool Process::Wait()$/;"	f	class:lib_linux::Process
Wait	src/semaphore_wrap.h	/^            void Wait()$/;"	f	class:lib_linux::Semaphore
Wait	src/thread_wrap.cpp	/^    void Thread::Wait()$/;"	f	class:lib_linux::Thread
WaitPop	src/jobqueue.h	/^                bool WaitPop(unsigned int unMilSecs, T &ret)$/;"	f	class:lib_linux::JobQueue
Warning	src/stdlog.cpp	/^    void StdLog::Warning(const char * format, ...)$/;"	f	class:lib_linux::StdLog
Write	src/serialport.h	/^        int Write(void *Buffer, int nBufferLength)$/;"	f	class:Serialport
Write	src/stdlog.cpp	/^    void ColorDecoratorHandler::Write(int level, const char *format, va_list arg)$/;"	f	class:lib_linux::ColorDecoratorHandler
Write	src/stdlog.cpp	/^    void StdLog::Write(int level, const char *format, va_list arg)$/;"	f	class:lib_linux::StdLog
Write	src/stdlog.cpp	/^    void StdLogOutHandler::Write(int level, const char *format, va_list arg)$/;"	f	class:lib_linux::StdLogOutHandler
Write	src/stdnetlog.cpp	/^    void StdLogNetHandler::Write(int level, const char *format, va_list arg)$/;"	f	class:lib_linux::StdLogNetHandler
Write	src/syslog_log.cpp	/^    void SyslogHandler::Write(int level, const char *format, va_list arg)$/;"	f	class:lib_linux::SyslogHandler
WriteString	src/stdlog.cpp	/^    void StdLogHandler::WriteString(int level, const char *format, ...)$/;"	f	class:lib_linux::StdLogHandler
ZIP_FILES	Makefile	/^ZIP_FILES:=$(addsuffix \/*.[hc]*, $(SRC_DIR) test) Makefile README.md$/;"	m
ZIP_NAME	Makefile	/^ZIP_NAME:=$(basename $(TARGET))$/;"	m
_BASE64_H_	src/base64.h	85;"	d
_Q_INVALIDATE	src/queue.h	86;"	d
_Q_INVALIDATE	src/queue.h	88;"	d
_SINGLETON_H_	src/singleton.h	6;"	d
_SNET_	src/SimpleNet/snet.h	2;"	d
_SNET_ADDRESS_H_	src/SimpleNet/snet_address.h	8;"	d
_SNET_CONFIG_H_	src/SimpleNet/snet_config.h	2;"	d
_SNET_FDSET_H_	src/SimpleNet/snet_fdset.h	8;"	d
_SNET_SERVER_H_	src/SimpleNet/snet_sessionManager.h	2;"	d
_SNET_SESSIONFACTORY_	src/SimpleNet/snet_sessionFactory.h	2;"	d
_SNET_SESSION_H_	src/SimpleNet/snet_session.h	8;"	d
_SNET_SOCKET_H_	src/SimpleNet/snet_socket.h	8;"	d
_SNET_SYSTEM_H_	src/SimpleNet/snet_tool.h	2;"	d
_STDLOG_H_	src/stdlog.h	2;"	d
_STDNETLOG_H_	src/stdnetlog.h	2;"	d
_SYSLOG_LOG_H_	src/syslog_log.h	2;"	d
_SYS_QUEUE_H_	src/queue.h	36;"	d
__BUFFER_H_	src/buffer.h	2;"	d
__CONDITION_H__	src/condition.h	2;"	d
__CONFIG_PARSER__	src/config_parser.h	2;"	d
__GETOPT_WRAP__	src/getopt_wrap.h	2;"	d
__JOBQUEUE_H__	src/jobqueue.h	2;"	d
__LIB_LINUX_CONFIG__	src/lib_linux_config.h	2;"	d
__MEMORY_CHECK__	src/memory_check.h	2;"	d
__MUTEX_H__	src/Mutex.h	2;"	d
__PROCESS_WRAP__	src/process_wrap.h	2;"	d
__SEMAPHORE_WRAP_H__	src/semaphore_wrap.h	2;"	d
__SERIALPORT_H__	src/serialport.h	2;"	d
__STRING_PARSE__	src/string_parse.h	2;"	d
__THREADPOOL_H__	src/threadpool.h	2;"	d
__THREAD_WRAP__	src/thread_wrap.h	2;"	d
__UTILITY_H__	src/utility.h	2;"	d
___KL_STATE_H_	src/kl_state.h	8;"	d
_addr	src/SimpleNet/snet_address.h	/^            struct sockaddr_in _addr;$/;"	m	class:lib_linux::Address	typeref:struct:lib_linux::Address::sockaddr_in
_buf	src/buffer.h	/^            char *_buf;$/;"	m	class:lib_linux::Buffer
_cur_pos	src/buffer.h	/^            int _cur_pos;$/;"	m	class:lib_linux::Buffer
_cur_state	src/kl_state.h	/^        state* _cur_state;$/;"	m	class:state_machine
_delete_sessions	src/SimpleNet/snet_sessionManager.h	/^            SessionMap _delete_sessions;$/;"	m	class:lib_linux::SessionManager
_entry	src/memory_check.h	/^        SLIST_ENTRY(TagElem) _entry;$/;"	m	struct:lib_linux::TagElem
_error_set	src/SimpleNet/snet_sessionManager.h	/^            Fdset _error_set;$/;"	m	class:lib_linux::SessionManager
_id	src/SimpleNet/snet_session.h	/^            int _id;$/;"	m	class:lib_linux::ISession
_listen	src/SimpleNet/snet_sessionManager.h	/^            Socket _listen;$/;"	m	class:lib_linux::SessionManager
_max_count	src/SimpleNet/snet_fdset.h	/^            unsigned int _max_count;$/;"	m	class:lib_linux::Fdset
_max_fd	src/SimpleNet/snet_sessionManager.h	/^            int  _max_fd;$/;"	m	class:lib_linux::SessionManager
_max_size	src/buffer.h	/^            int _max_size;$/;"	m	class:lib_linux::Buffer
_nbconnect_sessions	src/SimpleNet/snet_sessionManager.h	/^            SessionMap _nbconnect_sessions;$/;"	m	class:lib_linux::SessionManager
_nfds	src/SimpleNet/snet_sessionManager.h	/^            SOCKET _nfds;$/;"	m	class:lib_linux::SessionManager
_peer_addr	src/SimpleNet/snet_socket.h	/^        Address _peer_addr;$/;"	m	class:lib_linux::Socket
_pre_state	src/kl_state.h	/^        state* _pre_state;$/;"	m	class:state_machine
_read_set	src/SimpleNet/snet_sessionManager.h	/^            Fdset _read_set;$/;"	m	class:lib_linux::SessionManager
_recvbuf	src/SimpleNet/snet_session.h	/^            Buffer _recvbuf;$/;"	m	class:lib_linux::ISession
_sessions	src/SimpleNet/snet_sessionManager.h	/^            SessionMap _sessions;$/;"	m	class:lib_linux::SessionManager
_set	src/SimpleNet/snet_fdset.h	/^            ::fd_set *_set;$/;"	m	class:lib_linux::Fdset
_socket	src/SimpleNet/snet_socket.h	/^        SOCKET _socket;$/;"	m	class:lib_linux::Socket
_start_id	src/SimpleNet/snet_session.cpp	/^    int ISession::_start_id = 1;$/;"	m	class:lib_linux::ISession	file:
_start_id	src/SimpleNet/snet_session.h	/^            static int _start_id;$/;"	m	class:lib_linux::ISession
_write_set	src/SimpleNet/snet_sessionManager.h	/^            Fdset _write_set;$/;"	m	class:lib_linux::SessionManager
accept	src/SimpleNet/snet_socket.h	/^        bool accept(Socket &listen)$/;"	f	class:lib_linux::Socket
add	src/SimpleNet/snet_fdset.h	/^            bool add( SOCKET s )$/;"	f	class:lib_linux::Fdset
allocate	src/buffer.h	/^            void allocate( int size )$/;"	f	class:lib_linux::Buffer
arg	src/getopt_wrap.h	/^                std::string arg;$/;"	m	struct:lib_linux::GetOpt::Opt
basis_64	src/base64.c	/^static const char basis_64[] =$/;"	v	file:
begin	src/getopt_wrap.cpp	/^    GetOpt::iterator GetOpt::begin() const$/;"	f	class:lib_linux::GetOpt
begin	src/string_parse.cpp	/^    StringParse::iterator StringParse::begin() const$/;"	f	class:lib_linux::StringParse
bind	src/SimpleNet/snet_socket.h	/^        bool bind( const Address &address )$/;"	f	class:lib_linux::Socket
bind	src/SimpleNet/snet_socket.h	/^        bool bind( const std::string &ip, unsigned short port )$/;"	f	class:lib_linux::Socket
change	src/kl_state.cpp	/^void state::change(state_machine *machine, state *other)$/;"	f	class:state
change	src/kl_state.cpp	/^void state_machine::change(state *other)$/;"	f	class:state_machine
clear	src/SimpleNet/snet_fdset.h	/^            void clear()$/;"	f	class:lib_linux::Fdset
clear	src/buffer.h	/^            void clear()$/;"	f	class:lib_linux::Buffer
clear	src/kl_state.h	/^        void clear()$/;"	f	class:state_machine
connect	src/SimpleNet/snet_socket.h	/^        bool connect(const Address &addr)$/;"	f	class:lib_linux::Socket
connect_nb	src/SimpleNet/snet_socket.h	/^        bool connect_nb(const Address &addr)$/;"	f	class:lib_linux::Socket
count	src/SimpleNet/snet_fdset.h	/^            unsigned int count()$/;"	f	class:lib_linux::Fdset
create	src/SimpleNet/snet_socket.h	/^        bool create()$/;"	f	class:lib_linux::Socket
cur_state	src/kl_state.h	/^        state* cur_state()$/;"	f	class:state_machine
del	src/buffer.h	/^            int del(int len)$/;"	f	class:lib_linux::Buffer
do_recv	src/SimpleNet/snet_session.cpp	/^    int ISession::do_recv()$/;"	f	class:lib_linux::ISession
end	src/getopt_wrap.cpp	/^    GetOpt::iterator GetOpt::end() const$/;"	f	class:lib_linux::GetOpt
end	src/string_parse.cpp	/^    StringParse::iterator StringParse::end() const$/;"	f	class:lib_linux::StringParse
enter	src/kl_state.h	/^        virtual void enter( state_machine*) { }$/;"	f	class:state
fileName	src/memory_check.h	/^        char fileName[MAX_FILENAMESIZE];$/;"	m	struct:lib_linux::TagElem
free	src/buffer.h	/^            void free()$/;"	f	class:lib_linux::Buffer
free_size	src/buffer.h	/^            int free_size() const$/;"	f	class:lib_linux::Buffer
free_space	src/buffer.h	/^            char *free_space() $/;"	f	class:lib_linux::Buffer
g_queue	test/jobqueue_test.cpp	/^static JobQueue<int> g_queue;$/;"	v	file:
get	src/buffer.h	/^            int get( char *buf, int len )$/;"	f	class:lib_linux::Buffer
get_host_name	src/SimpleNet/snet_socket.h	/^        Address get_host_name(const char *pName)$/;"	f	class:lib_linux::Socket
get_ip	src/SimpleNet/snet_address.h	/^            std::string get_ip() const$/;"	f	class:lib_linux::Address
get_local_addr	src/SimpleNet/snet_socket.h	/^        Address get_local_addr()$/;"	f	class:lib_linux::Socket
get_peer_addr	src/SimpleNet/snet_socket.h	/^        const Address & get_peer_addr()$/;"	f	class:lib_linux::Socket
get_port	src/SimpleNet/snet_address.h	/^            unsigned short get_port() const$/;"	f	class:lib_linux::Address
getid	src/SimpleNet/snet_session.cpp	/^    int ISession::getid()$/;"	f	class:lib_linux::ISession
has_arg	src/getopt_wrap.h	/^                bool has_arg;$/;"	m	struct:lib_linux::GetOpt::Opt
has_state	src/kl_state.h	/^        bool has_state() const$/;"	f	class:state_machine
is_exit	test/SimpleNetTest.cpp	/^volatile static bool is_exit = false;$/;"	v	file:
is_set	src/SimpleNet/snet_fdset.h	/^            bool is_set( SOCKET s ) const$/;"	f	class:lib_linux::Fdset
is_valid	src/SimpleNet/snet_address.h	/^            bool is_valid() const$/;"	f	class:lib_linux::Address
is_valid	src/SimpleNet/snet_socket.h	/^        bool is_valid()$/;"	f	class:lib_linux::Socket
iterator	src/getopt_wrap.h	/^            typedef std::vector<Opt>::const_iterator iterator;$/;"	t	class:lib_linux::GetOpt
iterator	src/string_parse.h	/^            typedef std::vector<std::string>::const_iterator iterator;$/;"	t	class:lib_linux::StringParse
key_map	src/config_parser.h	/^            typedef std::map<std::string, TxtConfigParser *>  key_map;$/;"	t	class:lib_linux::IniConfigParser
key_map	src/config_parser.h	/^            typedef std::map<std::string, std::string> key_map;$/;"	t	class:lib_linux::TxtConfigParser
leave	src/kl_state.h	/^        virtual void leave( state_machine*) { }$/;"	f	class:state
lib_linux	src/Mutex.h	/^namespace lib_linux$/;"	n
lib_linux	src/SimpleNet/snet_address.h	/^namespace lib_linux$/;"	n
lib_linux	src/SimpleNet/snet_fdset.h	/^namespace lib_linux$/;"	n
lib_linux	src/SimpleNet/snet_session.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/SimpleNet/snet_session.h	/^namespace lib_linux$/;"	n
lib_linux	src/SimpleNet/snet_sessionFactory.h	/^namespace lib_linux$/;"	n
lib_linux	src/SimpleNet/snet_sessionManager.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/SimpleNet/snet_sessionManager.h	/^namespace lib_linux$/;"	n
lib_linux	src/SimpleNet/snet_socket.h	/^namespace lib_linux $/;"	n
lib_linux	src/SimpleNet/snet_tool.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/SimpleNet/snet_tool.h	/^namespace lib_linux$/;"	n
lib_linux	src/buffer.h	/^namespace lib_linux$/;"	n
lib_linux	src/condition.h	/^namespace lib_linux$/;"	n
lib_linux	src/config_parser.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/config_parser.h	/^namespace lib_linux$/;"	n
lib_linux	src/getopt_wrap.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/getopt_wrap.h	/^namespace lib_linux$/;"	n
lib_linux	src/jobqueue.h	/^namespace lib_linux$/;"	n
lib_linux	src/lib_linux_config.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/lib_linux_config.h	/^namespace lib_linux$/;"	n
lib_linux	src/memory_check.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/memory_check.h	/^namespace lib_linux$/;"	n
lib_linux	src/process_wrap.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/process_wrap.h	/^namespace lib_linux$/;"	n
lib_linux	src/semaphore_wrap.h	/^namespace lib_linux$/;"	n
lib_linux	src/stdlog.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/stdlog.h	/^namespace lib_linux$/;"	n
lib_linux	src/stdnetlog.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/stdnetlog.h	/^namespace lib_linux$/;"	n
lib_linux	src/string_parse.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/string_parse.h	/^namespace lib_linux$/;"	n
lib_linux	src/syslog_log.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/syslog_log.h	/^namespace lib_linux$/;"	n
lib_linux	src/thread_wrap.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/thread_wrap.h	/^namespace lib_linux$/;"	n
lib_linux	src/threadpool.cpp	/^namespace lib_linux$/;"	n	file:
lib_linux	src/threadpool.h	/^namespace lib_linux$/;"	n
lib_linux	src/utility.h	/^namespace lib_linux$/;"	n
line	src/memory_check.h	/^        int line;$/;"	m	struct:lib_linux::TagElem
listen	src/SimpleNet/snet_socket.h	/^        bool listen(int backlog)$/;"	f	class:lib_linux::Socket
long_opt	src/getopt_wrap.h	/^                std::string long_opt;$/;"	m	struct:lib_linux::GetOpt::Opt
m_argc	src/getopt_wrap.h	/^            int m_argc;$/;"	m	class:lib_linux::GetOpt
m_argument	src/getopt_wrap.h	/^            std::vector<std::string> m_argument;$/;"	m	class:lib_linux::GetOpt
m_argv	src/getopt_wrap.h	/^            char **m_argv;$/;"	m	class:lib_linux::GetOpt
m_attr	src/thread_wrap.h	/^            pthread_attr_t m_attr;$/;"	m	class:lib_linux::Thread
m_bRunFlag	src/serialport.h	/^        volatile bool m_bRunFlag;$/;"	m	class:Serialport
m_bRunning	src/thread_wrap.h	/^            bool m_bRunning;$/;"	m	class:lib_linux::Thread
m_bThreadRead	src/serialport.h	/^        bool m_bThreadRead;$/;"	m	class:Serialport
m_childPID	src/process_wrap.h	/^            pid_t m_childPID;$/;"	m	class:lib_linux::Process
m_cond	src/condition.h	/^            pthread_cond_t m_cond;$/;"	m	class:lib_linux::Condition
m_condition	src/jobqueue.h	/^                Condition m_condition;$/;"	m	class:lib_linux::JobQueue
m_fd	src/serialport.h	/^        int m_fd;$/;"	m	class:Serialport
m_keyMap	src/config_parser.h	/^            key_map m_keyMap;$/;"	m	class:lib_linux::IniConfigParser
m_keyMap	src/config_parser.h	/^            key_map m_keyMap;$/;"	m	class:lib_linux::TxtConfigParser
m_level	src/stdlog.h	/^            int m_level;$/;"	m	class:lib_linux::StdLog
m_mapOpts	src/getopt_wrap.h	/^            std::map<char, Opt> m_mapOpts;$/;"	m	class:lib_linux::GetOpt
m_mutex	src/Mutex.h	/^            Mutex &m_mutex;$/;"	m	class:lib_linux::AutoLock
m_mutex	src/Mutex.h	/^            pthread_mutex_t m_mutex;$/;"	m	class:lib_linux::Mutex
m_mutex	src/jobqueue.h	/^                Mutex m_mutex;$/;"	m	class:lib_linux::JobQueue
m_mutex	test/thread_wrap_test.cpp	/^        Mutex &m_mutex;$/;"	m	class:MyThread	file:
m_nBaudRate	src/serialport.h	/^        int m_nBaudRate;$/;"	m	class:Serialport
m_num	test/thread_wrap_test.cpp	/^        int m_num;$/;"	m	class:MyThread	file:
m_opts	src/getopt_wrap.h	/^            std::vector<Opt> m_opts;$/;"	m	class:lib_linux::GetOpt
m_pFactoryServSession	src/SimpleNet/snet_sessionManager.h	/^            SessionFactory *m_pFactoryServSession;$/;"	m	class:lib_linux::SessionManager
m_pHandler	src/stdlog.h	/^            StdLogHandler *m_pHandler;$/;"	m	class:lib_linux::ColorDecoratorHandler
m_pHandler	src/stdlog.h	/^            StdLogHandler *m_pHandler;$/;"	m	class:lib_linux::StdLog
m_pool	src/threadpool.h	/^                ThreadPool &m_pool;$/;"	m	class:lib_linux::ThreadPool::ThreadTask
m_queue	src/jobqueue.h	/^                std::deque<T> m_queue;$/;"	m	class:lib_linux::JobQueue
m_running	src/threadpool.h	/^            bool m_running;$/;"	m	class:lib_linux::ThreadPool
m_sem	src/semaphore_wrap.h	/^            sem_t m_sem;$/;"	m	class:lib_linux::Semaphore
m_semWait	src/thread_wrap.h	/^            Semaphore m_semWait;$/;"	m	class:lib_linux::Thread
m_socket	src/stdnetlog.h	/^            int m_socket;$/;"	m	class:lib_linux::StdLogNetHandler
m_strings	src/string_parse.h	/^            std::vector<std::string> m_strings;$/;"	m	class:lib_linux::StringParse
m_taskQueue	src/threadpool.h	/^            JobQueue<Task> m_taskQueue;$/;"	m	class:lib_linux::ThreadPool
m_threadID	src/thread_wrap.h	/^            pthread_t m_threadID;$/;"	m	class:lib_linux::Thread
m_threads	src/threadpool.h	/^            std::vector<ThreadTask *> m_threads;$/;"	m	class:lib_linux::ThreadPool
main	test/SimpleNetTest.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test/buffer_test.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test/getopt_test.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test/jobqueue_test.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/memorycheck_test.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test/process_test.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/serialport_test.cpp	/^int main(const int argc, const char *argv[])$/;"	f
main	test/stdlog_test.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/thread_wrap_test.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/threadpool_test.cpp	/^int main(int argc, char **argv)$/;"	f
max_count	src/SimpleNet/snet_fdset.h	/^            int max_count() const$/;"	f	class:lib_linux::Fdset
move_buf	src/buffer.h	/^            void move_buf( int move_bytes )$/;"	f	class:lib_linux::Buffer
move_pos	src/buffer.h	/^            void move_pos( int add_bytes )$/;"	f	class:lib_linux::Buffer
networkInitializer	src/SimpleNet/snet_tool.cpp	/^        static NetworkInitializer networkInitializer;$/;"	m	namespace:lib_linux::__anon3	file:
new	src/memory_check.h	70;"	d
next_pow_of_2	src/utility.h	/^            static unsigned int next_pow_of_2(unsigned int x)$/;"	f	class:lib_linux::Utility
onsig	test/SimpleNetTest.cpp	/^static void onsig(int dummy)$/;"	f	file:
operator <<	src/config_parser.cpp	/^    std::ostream &operator<<(std::ostream &stream, IniConfigParser &parser)$/;"	f	namespace:lib_linux
operator <<	src/config_parser.cpp	/^    std::ostream &operator<<(std::ostream &stream, TxtConfigParser &parser)$/;"	f	namespace:lib_linux
operator =	src/SimpleNet/snet_address.h	/^            const Address &operator = ( const struct sockaddr_in &addr )$/;"	f	class:lib_linux::Address
operator =	src/SimpleNet/snet_fdset.h	/^            const Fdset &operator = (const Fdset& _rhs)$/;"	f	class:lib_linux::Fdset
operator =	src/buffer.h	/^            const Buffer &operator = ( const Buffer &buf )$/;"	f	class:lib_linux::Buffer
operator ==	src/SimpleNet/snet_address.h	/^    inline bool operator == ( const Address &addr1, const Address &addr2 )$/;"	f	namespace:lib_linux
operator >>	src/config_parser.cpp	/^    std::istream &operator>>(std::istream &stream, IniConfigParser &parser)$/;"	f	namespace:lib_linux
operator >>	src/config_parser.cpp	/^    std::istream &operator>>(std::istream &stream, TxtConfigParser &parser)$/;"	f	namespace:lib_linux
operator delete	src/memory_check.h	/^inline void operator delete(void *mem)$/;"	f
operator delete[]	src/memory_check.h	/^inline void operator delete[](void *mem)$/;"	f
operator fd_set*	src/SimpleNet/snet_fdset.h	/^            operator fd_set* ()$/;"	f	class:lib_linux::Fdset
operator new	src/memory_check.h	/^inline void *operator new(std::size_t s, const char *file, int nLine)$/;"	f
operator new[]	src/memory_check.h	/^inline void *operator new[](std::size_t s, const char *file, int nLine)$/;"	f
operator sockaddr_in	src/SimpleNet/snet_address.h	/^            operator sockaddr_in() const$/;"	f	class:lib_linux::Address
pMemory	src/memory_check.h	/^        void *pMemory;$/;"	m	struct:lib_linux::TagElem
pr2six	src/base64.c	/^static const unsigned char pr2six[256] =$/;"	v	file:
put	src/buffer.h	/^            int put( const char *buf, int len )$/;"	f	class:lib_linux::Buffer
query_socket	src/SimpleNet/snet_socket.h	/^        SOCKET query_socket() const$/;"	f	class:lib_linux::Socket
raw	src/buffer.h	/^            const char *raw() const$/;"	f	class:lib_linux::Buffer
realloc	src/buffer.h	/^            int realloc(int nLen = 0)$/;"	f	class:lib_linux::Buffer
receive_event	src/kl_state.h	/^        virtual void receive_event(state_machine*, void *pvoid) { }$/;"	f	class:state
receive_event	src/kl_state.h	/^        void receive_event(void *pVoid)$/;"	f	class:state_machine
recv	src/SimpleNet/snet_session.cpp	/^    int ISession::recv( char *buf, int len )$/;"	f	class:lib_linux::ISession
release	src/SimpleNet/snet_socket.h	/^        void release()$/;"	f	class:lib_linux::Socket
remove	src/SimpleNet/snet_fdset.h	/^            void remove( SOCKET s )$/;"	f	class:lib_linux::Fdset
reset	src/SimpleNet/snet_address.h	/^            void reset()$/;"	f	class:lib_linux::Address
s_MainKey	src/thread_wrap.cpp	/^    pthread_key_t Thread::s_MainKey;$/;"	m	class:lib_linux::Thread	file:
s_MainKey	src/thread_wrap.h	/^            static pthread_key_t    s_MainKey;$/;"	m	class:lib_linux::Thread
s_mutex	src/memory_check.cpp	/^    Mutex MemoryCheck::s_mutex;$/;"	m	class:lib_linux::MemoryCheck	file:
s_mutex	src/memory_check.h	/^            static Mutex s_mutex;$/;"	m	class:lib_linux::MemoryCheck
s_tagList	src/memory_check.cpp	/^    TagHeadType MemoryCheck::s_tagList = SLIST_HEAD_INITIALIZER(s_tagList);$/;"	m	class:lib_linux::MemoryCheck	file:
s_tagList	src/memory_check.h	/^            static TagHeadType s_tagList;$/;"	m	class:lib_linux::MemoryCheck
send	src/SimpleNet/snet_session.cpp	/^    int ISession::send( const char *buf, int len )$/;"	f	class:lib_linux::ISession
set_ip	src/SimpleNet/snet_address.h	/^            void set_ip( const std::string &ip )$/;"	f	class:lib_linux::Address
set_port	src/SimpleNet/snet_address.h	/^            void set_port( unsigned short port )$/;"	f	class:lib_linux::Address
set_size	src/SimpleNet/snet_fdset.h	/^            void set_size( unsigned int max_fd )$/;"	f	class:lib_linux::Fdset
short_opt	src/getopt_wrap.h	/^                char short_opt;$/;"	m	struct:lib_linux::GetOpt::Opt
size	src/buffer.h	/^            int size() const$/;"	f	class:lib_linux::Buffer
size	src/memory_check.h	/^        int size;$/;"	m	struct:lib_linux::TagElem
snet_closesocket	src/SimpleNet/snet_config.h	12;"	d
snet_closesocket	src/SimpleNet/snet_config.h	34;"	d
socket_recv	src/SimpleNet/snet_socket.h	/^        int socket_recv(char *buffer, int nLen)$/;"	f	class:lib_linux::Socket
socket_send	src/SimpleNet/snet_socket.h	/^        int socket_send(const char *buffer, int nLen)$/;"	f	class:lib_linux::Socket
state	src/kl_state.h	/^class state$/;"	c
state_machine	src/kl_state.h	/^        state_machine(state *pStartState)$/;"	f	class:state_machine
state_machine	src/kl_state.h	/^class state_machine$/;"	c
system	src/SimpleNet/snet_tool.cpp	/^	namespace system$/;"	n	namespace:lib_linux	file:
system	src/SimpleNet/snet_tool.h	/^	namespace system$/;"	n	namespace:lib_linux
~Address	src/SimpleNet/snet_address.h	/^            ~Address()$/;"	f	class:lib_linux::Address
~AutoLock	src/Mutex.h	/^            ~AutoLock()$/;"	f	class:lib_linux::AutoLock
~Buffer	src/buffer.h	/^            ~Buffer()$/;"	f	class:lib_linux::Buffer
~Condition	src/condition.h	/^            ~Condition()$/;"	f	class:lib_linux::Condition
~Fdset	src/SimpleNet/snet_fdset.h	/^            ~Fdset()$/;"	f	class:lib_linux::Fdset
~GetOpt	src/getopt_wrap.cpp	/^    GetOpt::~GetOpt()$/;"	f	class:lib_linux::GetOpt
~IniConfigParser	src/config_parser.h	/^            ~IniConfigParser()$/;"	f	class:lib_linux::IniConfigParser
~JobQueue	src/jobqueue.h	/^                ~JobQueue()$/;"	f	class:lib_linux::JobQueue
~Mutex	src/Mutex.h	/^            ~Mutex()$/;"	f	class:lib_linux::Mutex
~NetworkInitializer	src/SimpleNet/snet_tool.cpp	/^                ~NetworkInitializer()$/;"	f	class:lib_linux::__anon3::NetworkInitializer
~Process	src/process_wrap.cpp	/^    Process::~Process()$/;"	f	class:lib_linux::Process
~Semaphore	src/semaphore_wrap.h	/^            ~Semaphore()$/;"	f	class:lib_linux::Semaphore
~Serialport	src/serialport.h	/^        ~Serialport()$/;"	f	class:Serialport
~SessionManager	src/SimpleNet/snet_sessionManager.cpp	/^    SessionManager::~SessionManager()$/;"	f	class:lib_linux::SessionManager
~Socket	src/SimpleNet/snet_socket.h	/^		virtual ~Socket()$/;"	f	class:lib_linux::Socket
~StdLog	src/stdlog.cpp	/^    StdLog::~StdLog()$/;"	f	class:lib_linux::StdLog
~StdLogHandler	src/stdlog.cpp	/^    StdLogHandler::~StdLogHandler()$/;"	f	class:lib_linux::StdLogHandler
~StdLogNetHandler	src/stdnetlog.cpp	/^    StdLogNetHandler::~StdLogNetHandler()$/;"	f	class:lib_linux::StdLogNetHandler
~SyslogHandler	src/syslog_log.cpp	/^    SyslogHandler::~SyslogHandler()$/;"	f	class:lib_linux::SyslogHandler
~Thread	src/thread_wrap.cpp	/^    Thread::~Thread()$/;"	f	class:lib_linux::Thread
~ThreadPool	src/threadpool.cpp	/^    ThreadPool::~ThreadPool()$/;"	f	class:lib_linux::ThreadPool
~state	src/kl_state.h	/^        virtual ~state() { }$/;"	f	class:state
